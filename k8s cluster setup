#Disable the swap memory...

#The default behavior of a kubelet is to fail to start if swap memory is detected on a node. This means that swap should either be disabled or tolerated by kubelet.

swapoff -a

sed -i '/swap/s/^\(.*\)$/#\1/g' /etc/fstab

#=========================================================================================================================

#Now install the container runtime.

#update the package manager

apt-get update -y

#go to documentation and search containerd and click on the "getting started with containerd" and select the ubuntu package manager (container.io)

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc


# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

#update the package manager

apt-get update -y

#install only the containerd.io only not all the docker components

apt-get install containerd.io -y

#Note: Containerd uses a configuration file located in /etc/cotainerd/config.toml for specifying the daemon level options.

#Generate the default configuration file(location), by the following command.

containerd config default > /etc/containerd/config.toml

#run the following command to update and configure cgroup as systemd for containerd.

#below command will find replace the content

sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

#start the containerd

systemctl restart containerd

systemctl enable containerd

#with this we've installed the containerd and the networking.

#==============================================================================================

#Network configuration.

#By default, the Linux kernel does not allow IPv4 packets to be routed between interfaces. Most Kubernetes cluster networking implementations will change this setting (if needed), but some might expect the administrator to do it for them.

#Enable IPv4 packet forwarding 

#sysctl params required by setup, params persist across reboots

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

# Apply sysctl params without reboot

sudo sysctl --system

#To Verify that net.ipv4.ip_forward is set to 1 with the following command.

sysctl net.ipv4.ip_forward

#now the k8s tools need to be installed now. ###installing Kubeadm

sudo apt-get update

# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

#Add the appropriate Kubernetes apt repository. Please note that this repository have packages only for Kubernetes 1.34

#This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

#update the package manager

apt-get update -y

#install the kubernetes components

apt-get install -y kubelet kubeadm kubectl

#note:- kubectl need to installed in the mastered node only.

#preventing the package manager from being automatically upgraged or removed with the following command.

apt-mark hold kubelet kubeadm kubectl

#now start the kubelet and enable the kubelet.service

systemctl daemon-reload

systemctl start kubelet

systemctl enable kubelet.service

#upto these commands common for the all the master and worker nodes.

#=========================================================================================================================================
  
#now the steps are only for the master node.

#switch to the root user

sudo -i

#Initialize the K8s master node by executing the below command.

kubeadm init

#this kubeadm helped us to download the required components for k8s cluster.

#next run the commands as the normal user.

#we installed the kubectl but internally the kubectl requires a config file i.e .kube/config

mkdir -p $HOME/.kube

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

sudo chown $(id -u):$(id -g) $HOME/.kube/config

#after this we need to add the network add-ons 

#calico networking addon

kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

#to get the token to join the master-node

kubeadm token create --print-join-command
